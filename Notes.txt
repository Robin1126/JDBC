JDBC

1. JDBC是什么？	
	Java Database Connetivity (Java语言连接数据库)

2. JDBC的本质是什么？
	JDBC是sun公司制定的一套接口Interface
		java.sql.* 这个包下面的

	接口都有调用者和实现者。
	面向接口调用，面向接口写实现类，都属于面向接口编程

	为什么要面向接口编程？
		解耦合：降低程序的耦合度，提高程序的扩展力/
		多态机制就是非常典型的：面向抽象编程。
		比如建议：
			Animal a = new Cat();
			Animal b = new Bird();
			// 喂养的方法
			public void feed(Animal x) {...} // 面向父类型编程

		接口是完全抽象的，里面只有常量和抽象方法
		接口是无法new对象的
		编写类的时候，如果用类去实现接口，那么就可以让多个类拥有相同的方法
		避免将方法写死在类里面，导致适用性降低。

思考：为什么sun要指定一套JDBC接口呢？
	因为每一个数据库的底层实现原理都不一样！！
	比如Oracle和MySQL就不一样。
	如果没有接口，那么连一种数据库就要写一套Java程序。
	SUN公司定义了一套接口，数据库公司对这套接口进行了自己的实习，我们java程序员
	只需要对接口的这边编写调用就可以了。
	 
	 驱动：就是接口的实现类
	 它们都打包到jar包里面

	 JDBC的本质是什么？ 一套SUN公司定义的接口

3. JDBC开发前的准备工作，先从官网下载对应的驱动jar包，然后将其配置到环境变量classpath当中！！
	这些jar包是由对应的数据库公司编写的，自己数据库对JDBC接口的实现。
	注意配置classpath的时候注意最前面加上一个.;这样保证其他的类可以从当前路径找
	以上的配置是针对于文本编辑器的方式开发的，使用IDEA的时候，不需要配置以上的环境变量

	IDEA有自己的配置方式
	1. module上点右键，选择open Module Settings
	2. 选择libraries里的添加，将mysql对应.jar包配置到module即可


4. JDBC编程六步
	
	第一步：注册驱动 （告诉JVM，要连接什么品牌的数据库）

	第二步：获取连接	（表示JVM的进程和数据库进程之间的通道打开）
			java程序和数据库联系，这两个是不同的进程，表示进程要通信，重量级的，使用完一定要关闭通道

	第三步：获取数据库操作对象（专门执行sql语句的对象）
			都是通过对象执行的SQL

	第四步：执行SQL语句

	第五步：处理查询结果集
			只有第四步执行的是DQL才有这一步，如果是DML就直接修改了，没有返回查询结果

	第六步：释放资源（使用完资源之后一定要关闭资源，Java和数据库属于进程间的通信，开启之后一定要关闭）

			
番外：使用PowerDesigner软件创建模型
	1. 新建model，选择PhysicalDiagram 并且选择对应的数据库
	2. ctrl + 滚轮缩放
	3. 在toolbox下面的Physical Diagram中可以新建table在网格中
	4. 双击新建好的table就可以设置
	5. General中的Code就是数据库中表的名字
	6. 在Columns中设置好对应的数据格式，字段名，约束等后，在Preview中可以看到对应的sql语句

	设计阶段使用PowerDesigner
			